{"$message_type":"diagnostic","message":"expected type, found macro `vec`","code":{"code":"E0573","explanation":"Something other than a type has been used when one was expected.\n\nErroneous code examples:\n\n```compile_fail,E0573\nenum Dragon {\n    Born,\n}\n\nfn oblivion() -> Dragon::Born { // error!\n    Dragon::Born\n}\n\nconst HOBBIT: u32 = 2;\nimpl HOBBIT {} // error!\n\nenum Wizard {\n    Gandalf,\n    Saruman,\n}\n\ntrait Isengard {\n    fn wizard(_: Wizard::Saruman); // error!\n}\n```\n\nIn all these errors, a type was expected. For example, in the first error, if\nwe want to return the `Born` variant from the `Dragon` enum, we must set the\nfunction to return the enum and not its variant:\n\n```\nenum Dragon {\n    Born,\n}\n\nfn oblivion() -> Dragon { // ok!\n    Dragon::Born\n}\n```\n\nIn the second error, you can't implement something on an item, only on types.\nWe would need to create a new type if we wanted to do something similar:\n\n```\nstruct Hobbit(u32); // we create a new type\n\nconst HOBBIT: Hobbit = Hobbit(2);\nimpl Hobbit {} // ok!\n```\n\nIn the third case, we tried to only expect one variant of the `Wizard` enum,\nwhich is not possible. To make this work, we need to using pattern matching\nover the `Wizard` enum:\n\n```\nenum Wizard {\n    Gandalf,\n    Saruman,\n}\n\ntrait Isengard {\n    fn wizard(w: Wizard) { // ok!\n        match w {\n            Wizard::Saruman => {\n                // do something\n            }\n            _ => {} // ignore everything else\n        }\n    }\n}\n```\n"},"level":"error","spans":[{"file_name":"src\\main.rs","byte_start":22,"byte_end":30,"line_start":2,"line_end":2,"column_start":12,"column_end":20,"is_primary":true,"text":[{"text":"    let v1:vec<u32> = vec![1,2,3,4,5];","highlight_start":12,"highlight_end":20}],"label":"not a type","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/rustc/17067e9ac6d7ecb70e50f92c1944e545188d2359\\library\\alloc\\src\\vec\\mod.rs","byte_start":14199,"byte_end":14295,"line_start":409,"line_end":409,"column_start":1,"column_end":97,"is_primary":false,"text":[],"label":"similarly named struct `Vec` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a struct with a similar name exists","code":null,"level":"help","spans":[{"file_name":"src\\main.rs","byte_start":22,"byte_end":25,"line_start":2,"line_end":2,"column_start":12,"column_end":15,"is_primary":true,"text":[{"text":"    let v1:vec<u32> = vec![1,2,3,4,5];","highlight_start":12,"highlight_end":15}],"label":null,"suggested_replacement":"Vec","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0573]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: expected type, found macro `vec`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\main.rs:2:12\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m2\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let v1:vec<u32> = vec![1,2,3,4,5];\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m---\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot a type\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mhelp: a struct with a similar name exists (notice the capitalization): `Vec`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0m/rustc/17067e9ac6d7ecb70e50f92c1944e545188d2359\\library\\alloc\\src\\vec\\mod.rs:409:1\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m |\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m = note: similarly named struct `Vec` defined here\u001b[0m\n\n"}
2025-07-10T03:39:14.508Z INFO  [rustowlc::core] start borrowck of DefId(0:3 ~ macros[14ad]::main)
2025-07-10T03:39:14.510Z INFO  [rustowlc::core::analyze] facts of DefId(0:3 ~ macros[14ad]::main) prepared; start analyze of DefId(0:3 ~ macros[14ad]::main)
2025-07-10T03:39:14.512Z INFO  [rustowlc::core] borrow checked: 1 / 2
2025-07-10T03:39:14.513Z INFO  [rustowlc::core::analyze] start re-computing borrow check with dump: true
2025-07-10T03:39:14.513Z INFO  [rustowlc::core::analyze] borrow check finished
2025-07-10T03:39:14.514Z INFO  [rustowlc::core] start borrowck of DefId(0:4 ~ macros[14ad]::main#1)
2025-07-10T03:39:14.515Z INFO  [rustowlc::core::analyze] facts of DefId(0:4 ~ macros[14ad]::main#1) prepared; start analyze of DefId(0:4 ~ macros[14ad]::main#1)
2025-07-10T03:39:14.515Z INFO  [rustowlc::core] borrow checked: 2 / 2
2025-07-10T03:39:14.515Z INFO  [rustowlc::core::analyze] start re-computing borrow check with dump: true
2025-07-10T03:39:14.516Z INFO  [rustowlc::core] analyzed one item of d:\OneDrive - Sequantix Pvt. Ltd\Learning\Rust_learning\macros\src\main.rs
2025-07-10T03:39:14.516Z INFO  [rustowlc::core::analyze] borrow check finished
2025-07-10T03:39:14.518Z INFO  [rustowlc::core] analyzed one item of d:\OneDrive - Sequantix Pvt. Ltd\Learning\Rust_learning\macros\src\main.rs
{"$message_type":"diagnostic","message":"aborting due to 1 previous error","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: aborting due to 1 previous error\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"For more information about this error, try `rustc --explain E0573`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;15mFor more information about this error, try `rustc --explain E0573`.\u001b[0m\n"}
